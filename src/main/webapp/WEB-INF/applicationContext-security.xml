<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security.xsd">
	
	<!-- ======================== FILTER CHAIN ======================= -->
	<bean id="filterChainProxy"
		class="org.springframework.security.web.FilterChainProxy">
		<constructor-arg>
			<list>
				<security:filter-chain pattern="/xmlrpc/**"
					filters="anonymousProcessingFilter" />
				<security:filter-chain pattern="/**/*.xml"
					filters="securityContextPersistenceFilter,
				        openIdAuthenticationFilter,
				        basicProcessingFilter,
				        rememberMeProcessingFilter,
				        basicExceptionTranslationFilter,
				        privateBlogInvocationInterceptor,
				        filterInvocationInterceptor" />
				<security:filter-chain pattern="/**"
					filters="securityContextPersistenceFilter,
				        openIdAuthenticationFilter,
				        formProcessingFilter,
				        rememberMeProcessingFilter,
				        exceptionTranslationFilter,
				        privateBlogInvocationInterceptor,
				        filterInvocationInterceptor" />
			</list>
		</constructor-arg>
	</bean>

	<!-- ======================== AUTHENTICATION ======================= -->

	<bean id="authenticationManager"
		class="org.springframework.security.authentication.ProviderManager">
		<constructor-arg name="providers">
			<list>
				<ref bean="daoAuthenticationProvider" />
				<ref bean="rememberMeAuthenticationProvider" />
				<ref bean="openIdAuthenticationProvider" />
			</list>
		</constructor-arg>
	</bean>

	<bean id="daoAuthenticationProvider"
		class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="userDetailsService"
			ref="pebbleUserDetailsService" />
		<property name="passwordEncoder" ref="passwordEncoder" />
	</bean>

	<!-- this is a default implementation of Acegi's UserDetailsService that 
		plugs into the daoAuthenticationProvider - you don't need this if you are 
		using an alternative UserDetailsService or another AuthenticationProvider -->
	<bean id="pebbleUserDetailsService"
		class="net.sourceforge.pebble.security.DefaultUserDetailsService">
		<property name="securityRealm" ref="pebbleSecurityRealm" />
	</bean>

	<!-- an implementation of net.sourceforge.pebble.security.SecurityRealm 
		is required to provide detailed user information and manage users it is plugged 
		into other components outside the context of this file -->
	<bean id="pebbleSecurityRealm"
		class="net.sourceforge.pebble.security.DefaultSecurityRealm">
		<property name="configuration" ref="pebbleConfiguration" />
		<property name="passwordEncoder" ref="passwordEncoder" />
	</bean>

	<bean id="passwordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

	<!-- Automatically receives AuthenticationEvent messages -->
	<bean id="loggerListener"
		class="org.springframework.security.authentication.event.LoggerListener" />

	<bean id="securityContextPersistenceFilter"
		class="org.springframework.security.web.context.SecurityContextPersistenceFilter" />

	<bean id="rememberMeProcessingFilter"
		class="org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter">
		<constructor-arg name="authenticationManager"
			ref="authenticationManager" />
		<constructor-arg name="rememberMeServices" ref="rememberMeServices" />
	</bean>

	<bean id="rememberMeServices"
		class="org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices">
		<constructor-arg name="key" value="pebble" />
		<constructor-arg name="userDetailsService"
			ref="pebbleUserDetailsService" />
	</bean>

	<bean id="rememberMeAuthenticationProvider"
		class="org.springframework.security.authentication.RememberMeAuthenticationProvider">
		<constructor-arg value="pebble" />
	</bean>

	<bean id="roleVoter"
		class="org.springframework.security.access.vote.RoleVoter" />

	<!-- ===================== HTTP REQUEST SECURITY ==================== -->

	<bean id="anonymousProcessingFilter"
		class="org.springframework.security.web.authentication.AnonymousAuthenticationFilter">
		<constructor-arg value="anonymous" />
		<constructor-arg value="#{userAttribute.password}" />
		<constructor-arg value="#{userAttribute.authorities}" />
	</bean>

	<bean id="userAttribute" class="org.springframework.security.core.userdetails.memory.UserAttribute">
		<property name="password" value="anonymous"/>
		<property name="authoritiesAsString" value="anonymousUser,ROLE_ANONYMOUS"/>
	</bean>
	
	<bean id="formProcessingFilter"
		class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<property name="authenticationManager"
			ref="authenticationManager" />
		<property name="authenticationFailureHandler"
			ref="authenticationFailureHandler" />
		<property name="filterProcessesUrl"
			value="/j_spring_security_check" />
		<property name="rememberMeServices" ref="rememberMeServices" />
		<property name="authenticationSuccessHandler"
			ref="authenticationSuccessHandler" />
	</bean>

	<bean id="authenticationSuccessHandler"
		class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<property name="targetUrlParameter" value="redirectUrl" />
		<property name="redirectStrategy" ref="redirectStrategy" />
	</bean>

	<bean id="redirectStrategy"
		class="net.sourceforge.pebble.security.PebbleRedirectStrategy" />

	<bean id="authenticationFailureHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<property name="defaultFailureUrl"
			value="/loginPage.action?error=login.incorrect" />
		<property name="redirectStrategy" ref="redirectStrategy" />
	</bean>

	<bean id="authenticationEntryPoint"
		class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<constructor-arg name="loginFormUrl" value="/loginPage.action" />
		<property name="forceHttps" value="false" />
	</bean>

	<bean id="requestCache"
		class="org.springframework.security.web.savedrequest.HttpSessionRequestCache" />
	
	<bean id="exceptionTranslationFilter"
		class="org.springframework.security.web.access.ExceptionTranslationFilter">
		<constructor-arg name="authenticationEntryPoint"
			ref="authenticationEntryPoint" />
		<constructor-arg name="requestCache"
			ref="requestCache" />
	</bean>

	<bean id="accessDecisionManager"
		class="org.springframework.security.access.vote.AffirmativeBased">
		<constructor-arg name="decisionVoters">
			<list>
				<ref bean="roleVoter" />
			</list>
		</constructor-arg>
	</bean>

	<bean id="basicProcessingFilter"
		class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
		<constructor-arg name="authenticationManager"
			ref="authenticationManager" />
		<constructor-arg name="authenticationEntryPoint"
			ref="basicAuthenticationEntryPoint" />
	</bean>

	<bean id="basicAuthenticationEntryPoint"
		class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
		<property name="realmName" value="Secured newsfeeds" />
	</bean>

	<bean id="basicExceptionTranslationFilter"
		class="org.springframework.security.web.access.ExceptionTranslationFilter">
		<constructor-arg name="authenticationEntryPoint"
			ref="basicAuthenticationEntryPoint" />
	</bean>

	<!-- ===================== OPEN ID SUPPORT ==================== -->

	<bean id="openIdConsumer"
		class="org.springframework.security.openid.OpenID4JavaConsumer" />

	<bean id="openIdAuthenticationFilter"
		class="org.springframework.security.openid.OpenIDAuthenticationFilter">
		<property name="authenticationManager"
			ref="authenticationManager" />
		<property name="rememberMeServices" ref="rememberMeServices" />
		<property name="consumer" ref="openIdConsumer" />
		<property name="authenticationSuccessHandler"
			ref="authenticationSuccessHandler" />
		<property name="authenticationFailureHandler"
			ref="openIdAuthenticationFailureHandler" />
	</bean>

	<bean id="openIdAuthenticationProvider"
		class="org.springframework.security.openid.OpenIDAuthenticationProvider">
		<property name="userDetailsService"
			ref="openIdUserDetailsService" />
	</bean>

	<bean id="openIdUserDetailsService"
		class="net.sourceforge.pebble.security.OpenIdUserDetailsService">
		<property name="securityRealm" ref="pebbleSecurityRealm" />
	</bean>

	<bean id="openIdAuthenticationFailureHandler"
		class="net.sourceforge.pebble.security.OpenIdAuthenticationFailureHandler">
		<property name="redirectStrategy" ref="redirectStrategy" />
	</bean>

	<!-- Note the order that entries are placed against the objectDefinitionSource 
		is critical. The FilterSecurityInterceptor will work from the top of the 
		list down to the FIRST pattern that matches the request URL. Accordingly, 
		you should place MOST SPECIFIC (ie a/b/c/d.*) expressions first, with LEAST 
		SPECIFIC (ie a/.*) expressions last -->
	<bean id="filterInvocationInterceptor"
		class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<property name="authenticationManager"
			ref="authenticationManager" />
		<property name="accessDecisionManager"
			ref="accessDecisionManager" />
		<property name="securityMetadataSource">
			<security:filter-security-metadata-source use-expressions="false">
				<security:intercept-url
					pattern="/**/*.secureaction"
					access="ROLE_BLOG_OWNER,ROLE_BLOG_PUBLISHER,ROLE_BLOG_CONTRIBUTOR,ROLE_BLOG_ADMIN,ROLE_BLOG_READER" />
				<security:intercept-url pattern="/**/files/"
					access="ROLE_BLOG_CONTRIBUTOR" />
				<security:intercept-url pattern="/**/images/"
					access="ROLE_BLOG_CONTRIBUTOR" />
				<security:intercept-url	pattern="/**/theme/**"
					access="ROLE_BLOG_OWNER" />
				<security:intercept-url pattern="/**/help/**"
					access="ROLE_BLOG_OWNER,ROLE_BLOG_PUBLISHER,ROLE_BLOG_CONTRIBUTOR" />
			</security:filter-security-metadata-source>
		</property>
	</bean>

	<!-- ===================== PRIVATE BLOG SECURITY ==================== -->

	<bean id="privateBlogRoleVoter"
		class="net.sourceforge.pebble.security.PrivateBlogVoter" />

	<bean id="privateBlogAccessDecisionManager"
		class="org.springframework.security.access.vote.AffirmativeBased">
		<constructor-arg name="decisionVoters">
			<list>
				<ref bean="privateBlogRoleVoter" />
			</list>
		</constructor-arg>
	</bean>

	<bean id="privateBlogInvocationInterceptor"
		class="net.sourceforge.pebble.security.PrivateBlogSecurityInterceptor">
		<property name="authenticationManager"
			ref="authenticationManager" />
		<property name="accessDecisionManager"
			ref="privateBlogAccessDecisionManager" />
	</bean>

</beans>